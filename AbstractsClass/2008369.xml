<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>SHF: Small: Programming with Semantic Revision Requests</AwardTitle>
<AwardEffectiveDate>06/01/2020</AwardEffectiveDate>
<AwardExpirationDate>05/31/2023</AwardExpirationDate>
<AwardTotalIntnAmount>499234.00</AwardTotalIntnAmount>
<AwardAmount>499234</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>Anindya Banerjee</SignBlockName>
</ProgramOfficer>
<AbstractNarration>Software development today is a social process, and the workflow of&lt;br/&gt;programmers is increasingly centered around discussing program&lt;br/&gt;revisions - that is, artifacts that document small, incremental program&lt;br/&gt;changes. Meanwhile, traditional research on testing, debugging, and analyzing&lt;br/&gt;programs focuses on one program version at a time, ignoring any preceding or&lt;br/&gt;succeeding versions of the same software artifact. The project's novelties&lt;br/&gt;are a foundational examination of program revisions and the investigation of&lt;br/&gt;automated techniques that cooperatively assist software-engineering teams&lt;br/&gt;with reasoning about them. The project's impacts are to enhance the way&lt;br/&gt;engineering teams collaboratively evolve their software and thus enable them&lt;br/&gt;to more effectively create secure and reliable software on which society&lt;br/&gt;depends.&lt;br/&gt;&lt;br/&gt;The project's core contribution is defining the notion of a "semantic&lt;br/&gt;revision request" that enables treating program revisions as first-class&lt;br/&gt;entities for debugging and analysis tools. A semantic view of program&lt;br/&gt;revisions enables programmers to run or analyze the program revision (both&lt;br/&gt;before and after a change simultaneously), not merely each of the two program&lt;br/&gt;versions, as supported by today's conventional tools. By focusing on&lt;br/&gt;debugging and analyzing program revisions - not their individual program&lt;br/&gt;versions - the resulting tools come closer to capturing the intent of the&lt;br/&gt;programmer as they develop and commit program changes. The intended broader&lt;br/&gt;impact from a technical perspective is that these executable and analyzable&lt;br/&gt;specifications will supplement, or even replace, informal descriptions about&lt;br/&gt;how software systems evolve, by providing an unambiguous way to communicate&lt;br/&gt;high-level programmer intent.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>05/22/2020</MinAmdLetterDate>
<MaxAmdLetterDate>05/22/2020</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>2008369</AwardID>
<Investigator>
<FirstName>Bor-Yuh Evan</FirstName>
<LastName>Chang</LastName>
<EmailAddress>evan.chang@colorado.edu</EmailAddress>
<StartDate>05/22/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Colorado at Boulder</Name>
<CityName>Boulder</CityName>
<ZipCode>803031058</ZipCode>
<PhoneNumber>3034926221</PhoneNumber>
<StreetAddress>3100 Marine Street, Room 481</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Colorado</StateName>
<StateCode>CO</StateCode>
</Institution>
<ProgramElement>
<Code>7798</Code>
<Text>Software &amp; Hardware Foundation</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7943</Code>
<Text>PROGRAMMING LANGUAGES</Text>
</ProgramReference>
</Award>
</rootTag>
