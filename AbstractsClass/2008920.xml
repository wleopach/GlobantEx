<?xml version="1.0" encoding="UTF-8"?>
<rootTag>
<Award>
<AwardTitle>AF: SMALL: Further Investigation of the Sum of Squares Hierarchy</AwardTitle>
<AwardEffectiveDate>10/01/2020</AwardEffectiveDate>
<AwardExpirationDate>09/30/2023</AwardExpirationDate>
<AwardTotalIntnAmount>400000.00</AwardTotalIntnAmount>
<AwardAmount>400000</AwardAmount>
<AwardInstrument>
<Value>Standard Grant</Value>
</AwardInstrument>
<Organization>
<Code>05010000</Code>
<Directorate>
<Abbreviation>CSE</Abbreviation>
<LongName>Direct For Computer &amp; Info Scie &amp; Enginr</LongName>
</Directorate>
<Division>
<Abbreviation>CCF</Abbreviation>
<LongName>Division of Computing and Communication Foundations</LongName>
</Division>
</Organization>
<ProgramOfficer>
<SignBlockName>A. Funda Ergun</SignBlockName>
</ProgramOfficer>
<AbstractNarration>The sum of squares hierarchy (SOS) is an algorithmic framework which has the following nice properties. First, SOS is broadly applicable and surprisingly powerful, capturing the best-known algorithms for many problems. Second, in some sense, SOS is simple as all it uses is polynomial equalities and the fact that squares are non-negative. Thus, understanding the power of SOS gives us insights into designing new algorithms and insights into which problems cannot be solved efficiently. In this project, the investigator will further investigate the power of SOS. As part of this project, the investigator will train and mentor graduate students in complexity-theory research.&lt;br/&gt;&lt;br/&gt;To further investigate the power of SOS, the investigator plans to research questions including but not limited to the following. (1) Can one lift degree 2 SOS lower bounds for constraint satisfaction problems to higher degree SOS lower bounds? This question is related to determining the performance of SOS on the unique games problem, which is a major open problem. (2) What is the performance of SOS on robust estimation problems where an adversary has corrupted a small portion of the input? (3) Graph matrices are a type of matrix that appears when analyzing SOS. However, graph matrices are not well understood mathematically as there are only rough norm bounds on graph matrices. Can these norm bounds on graph matrices be improved? More ambitiously, can one determine the spectrum of the eigenvalues and/or singular values of graph matrices? (4) Can one remove the current limitations on techniques for analyzing SOS on planted problems, which are problems where trying to distinguish a signal from random noise?  (5) What is the performance of SOS for finding the tensor nuclear norm of a tensor? This question is closely related to the performance of SOS on the tensor decomposition and tensor completion problems, which are two important problems in machine learning. Through researching these questions, the investigator aims to further improve the understanding of SOS, finding new algorithms and/or lower bounds along the way.&lt;br/&gt;&lt;br/&gt;This award reflects NSF's statutory mission and has been deemed worthy of support through evaluation using the Foundation's intellectual merit and broader impacts review criteria.</AbstractNarration>
<MinAmdLetterDate>08/20/2020</MinAmdLetterDate>
<MaxAmdLetterDate>10/19/2020</MaxAmdLetterDate>
<ARRAAmount/>
<AwardID>2008920</AwardID>
<Investigator>
<FirstName>Aaron</FirstName>
<LastName>Potechin</LastName>
<EmailAddress>potechin@uchicago.edu</EmailAddress>
<StartDate>08/20/2020</StartDate>
<EndDate/>
<RoleCode>Principal Investigator</RoleCode>
</Investigator>
<Institution>
<Name>University of Chicago</Name>
<CityName>Chicago</CityName>
<ZipCode>606372612</ZipCode>
<PhoneNumber>7737028669</PhoneNumber>
<StreetAddress>6054 South Drexel Avenue</StreetAddress>
<CountryName>United States</CountryName>
<StateName>Illinois</StateName>
<StateCode>IL</StateCode>
</Institution>
<ProgramElement>
<Code>7796</Code>
<Text>Algorithmic Foundations</Text>
</ProgramElement>
<ProgramReference>
<Code>7923</Code>
<Text>SMALL PROJECT</Text>
</ProgramReference>
<ProgramReference>
<Code>7926</Code>
<Text>ALGORITHMS</Text>
</ProgramReference>
<ProgramReference>
<Code>7927</Code>
<Text>COMPLEXITY &amp; CRYPTOGRAPHY</Text>
</ProgramReference>
<ProgramReference>
<Code>7933</Code>
<Text>NUM, SYMBOL, &amp; ALGEBRA COMPUT</Text>
</ProgramReference>
<Appropriation>
<Code>0120</Code>
</Appropriation>
</Award>
</rootTag>
